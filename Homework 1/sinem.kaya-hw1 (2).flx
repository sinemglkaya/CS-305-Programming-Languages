%{
#include <stdio.h>
int line_number = 1; // Initialize line number
int comment_line = 0;
%}

%x COMMENT NESTED_COMMENT

BEFORE_AT [a-zA-Z0-9]([a-zA-Z0-9._-]*[a-zA-Z0-9])?
AFTER_AT ([a-zA-Z0-9]([-a-zA-Z0-9]*[a-zA-Z0-9]\.)+[a-zA-Z0-9]{2,})

%%

[0-9]{2}[./-][0-9]{2}[./-][0-9]{4} {
    char day[3], month[3], year[5];
    if (yytext[2] != yytext[5]) {
        printf("%d_ILLEGAL_CHARACTER_(%s)\n", line_number, yytext);
    }
    else if (sscanf(yytext, "%2[^./-]%*[/./-]%2[^./-]%*[/./-]%4[^./-]", day, month, year) == 3) {
        printf("%d_tDATE_(Day_%s_Month_%s_Year_%s)\n", line_number, day, month, year);
    } 
 
}

([0-9]{2}\:[0-9]{2}) {
    char hour[3], minute[3];
    sscanf(yytext, "%2[^:]:%2[^:]", hour, minute);
    printf("%d_tTIME_(Hour_%s_Minute_%s)\n", line_number, hour, minute);
}

[ \t]*end[ \t]+schedule  { printf("%d_tENDSCHEDULE\n", line_number); } //  detecting end schedule but it should be after the new line character 
^end[ \t]*Mail      { printf("%d_tENDMAIL\n", line_number); } // detecting end Mail but there can be many spaces between them

Mail            { printf("%d_tMAIL\n", line_number); }
from            { printf("%d_tFROM\n", line_number); }
set             { printf("%d_tSET\n", line_number); }
schedule        { printf("%d_tSCHEDULE\n", line_number); }
send            { printf("%d_tSEND\n", line_number); }
to              { printf("%d_tTO\n", line_number); }
:               { printf("%d_tCOLON\n", line_number); }
,               { printf("%d_tCOMMA\n", line_number); }
\(              { printf("%d_tLPR\n", line_number); }
\)              { printf("%d_tRPR\n", line_number); }
\[              { printf("%d_tLBR\n", line_number); }
\]              { printf("%d_tRBR\n", line_number); }
@               { printf("%d_tAT\n", line_number); }

"//"[^"\n"]*       { /* remove single line comments */ }


"/*"               { comment_line = 1; BEGIN(NESTED_COMMENT); }
<NESTED_COMMENT>"/*"   { comment_line++; }
<NESTED_COMMENT>"*/"   {
    if (--comment_line <= 0) {
        BEGIN(INITIAL);
    }       
}
<NESTED_COMMENT>\n      { line_number++; } // Increment line_number in the comment state
<NESTED_COMMENT>.|\n   { /* match anything inside comments */ }



{BEFORE_AT}@{AFTER_AT} { printf("%d_tADDRESS_(%s)\n", line_number, yytext); }

\"([^\"\\]*(\\.[^\"\\]*)*)\" {
    char* str = yytext + 1; // Skip the opening quotation mark
    char* end = yytext + yyleng - 1; // Exclude the closing quotation mark
    printf("%d_tSTRING_(%.*s)\n", line_number, yyleng - 2, yytext + 1); // Print the string without quotation marks
    while (str < end) {
        if (*str == '\n') {
            line_number++;
        }
	str++;
    }
}

[A-Za-z][A-Za-z0-9]+ { printf("%d_tIDENT_(%s)\n", line_number, yytext); } // detecting any other element that are not catch by the previous tokens

\n {line_number++; }
[ \t\r] /* ignore whitespace */
.           { printf("%d_ILLEGAL_CHARACTER_(%s)\n", line_number, yytext); } //detecting unrecognized characters
%%
int main () {
    yylex();
    return (0);
}

